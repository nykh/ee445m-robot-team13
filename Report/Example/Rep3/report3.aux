\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Objective}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Software Design}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Measurement}{21}}
\@writefile{toc}{\contentsline {paragraph}{(a) Plot of the logic analyzerrunning the blocking/sleeping/killing/round-robin system\\}{21}}
\@writefile{toc}{\contentsline {paragraph}{(b) Plot of the scope window running the blocking/sleeping/killing/priority system \\}{21}}
\@writefile{toc}{\contentsline {paragraph}{(c) Table like Table 3.1 each showing performance measurements versus sizes of the Fifo and timeslices. \\}{21}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Scope showing Round-robin scheduler running\relax }}{22}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{RR}{{1}{22}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Scope showing Priority scheduler running\relax }}{23}}
\newlabel{PRI}{{2}{23}}
\newlabel{PM}{{3}{24}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Analysis and Discussion}{24}}
\@writefile{toc}{\contentsline {paragraph}{How would your implementation of OS\_AddPeriodicThread be different if there were 10 background threads? (Preparation 1)\\}{24}}
\@writefile{toc}{\contentsline {paragraph}{How would your implementation of blocking semaphores be different if there were 100 foreground threads? (Preparation 4) \\}{24}}
\@writefile{toc}{\contentsline {paragraph}{How would your implementation of the priority scheduler be different if there were 100 foreground threads? (Preparation 5) \\}{24}}
\@writefile{toc}{\contentsline {paragraph}{What happens to your OS if all the threads are blocked? If your OS would crash, describe exactly what the OS does? What happens to your OS if all the threads are sleeping? If your OS would crash, describe exactly what the OS does? If you answered crash to either or both, explain how you might change your OS to prevent the crash. \\}{24}}
\@writefile{toc}{\contentsline {paragraph}{What happens to your OS if one of the foreground threads returns? e.g., what if you added this foreground\\[5pt] }{25}}
\@writefile{toc}{\contentsline {paragraph}{What are the advantages of spinlock semaphores over blocking semaphores? What are the advantages of blocking semaphores over spinlock? \\}{25}}
\@writefile{toc}{\contentsline {paragraph}{Consider the case where thread $T_1$ interrupts thread $T_2$, and we are experimentally verifying the system operates without critical sections. Let \emph  {n} be the number of times $T_1$ interrupts $T_2$. Let \emph  {m} be the total number of interruptible locations within $T_2$. Assume the time during which $T_1$ triggers is random with respect to the place (between which two instructions of $T_2$) it gets interrupted. In other words, there are \emph  {m} equally-likely places within $T_2$ for the $T_1$ interrupt to occur. What is the probability after \emph  {n} interrupts that a particular place in $T_2$ was never selected? Furthermore, what is the probability that all locations were interrupted at least once?\\}{25}}
